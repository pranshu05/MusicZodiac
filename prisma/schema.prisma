generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id              String    @id
  name            String?
  image           String?
  username        String?   @unique
  createdAt       DateTime  @default(now())
  accounts        Account[]
  musicChart      MusicChart?
  friends         Friend[]  @relation("UserFriends")
  friendsOf       Friend[]  @relation("FriendUsers")
  aiForecasts     AIForecast[]

  @@unique([id, username])
}

model MusicChart {
  id          String   @id @default(cuid())
  userId      String   @unique
  chartData   Json
  generatedAt DateTime
  updatedAt   DateTime @updatedAt @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Friend {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  status    String   @default("pending") // pending, accepted, rejected
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend    User     @relation("FriendUsers", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
}

model AIForecast {
  id          String   @id @default(cuid())
  userId      String
  type        String   // 'monthly' or 'discovery'
  subType     String?  // for discovery: 'artists', 'genres'
  data        Json
  generatedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, subType])
}